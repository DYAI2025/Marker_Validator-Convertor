{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://example.org/schemas/detect/v1.0",
  "title": "Detect Schema",
  "description": "Schema for DETECT_ files",
  "type": "object",
  "required": ["id", "rule", "fire_marker"],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^DETECT_[A-Z0-9_]+$",
      "description": "Detect ID with required DETECT_ prefix"
    },
    "description": {
      "type": "string",
      "description": "Description of the detect rule"
    },
    "rule": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["regex", "stddev", "frequency", "trend_delta", "embedding_distance", "cross_speaker_pattern", "plugin"],
          "description": "Type of detection rule"
        },
        "pattern": {
          "type": "string",
          "description": "Regex pattern (for regex type)"
        },
        "flags": {
          "type": "string",
          "description": "Regex flags (for regex type)"
        },
        "window": {
          "type": "integer",
          "description": "Window size (for non-regex types)"
        },
        "threshold": {
          "type": "number",
          "description": "Threshold value (for non-regex types)"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "regex" } }
          },
          "then": {
            "required": ["pattern"]
          }
        },
        {
          "if": {
            "properties": { "type": { "enum": ["stddev", "frequency", "trend_delta", "embedding_distance", "cross_speaker_pattern"] } }
          },
          "then": {
            "required": ["window", "threshold"]
          }
        }
      ]
    },
    "fire_marker": {
      "type": "string",
      "pattern": "^(A|S|C|MM)_[A-Z0-9_]+$",
      "description": "Marker ID that gets fired when rule matches"
    }
  },
  "additionalProperties": true
} 